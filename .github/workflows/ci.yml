# yaml-language-server: $schema=https://json.schemastore.org/github-workflow
name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test
        run: npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false

  release:
    name: Release
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check for existing release
        id: check-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const releaseExists = releases.some(release => 
              release.tag_name === `v${{ steps.package-version.outputs.version }}`
            );
            core.setOutput('exists', releaseExists);

      - name: Skip if release exists
        if: steps.check-release.outputs.exists == 'true'
        run: |
          echo "Release v${{ steps.package-version.outputs.version }} already exists, skipping..."
          exit 0

      - name: Create Release
        if: steps.check-release.outputs.exists != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Release v${{ steps.package-version.outputs.version }}
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          body: |
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

      - name: Configure npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm config set registry=https://registry.npmjs.org/

      - name: Publish to npm
        run: |
          # Try to publish
          if ! npm publish --access public; then
            if [ $? -eq 1 ]; then
              echo "::warning::Package already exists in the registry, continuing..."
            elif [ $? -eq 128 ] && [[ $(npm view type-safe-enum versions --json 2>/dev/null | jq -r '.[-1]') == "1.0.0" ]]; then
              echo "::warning::Cannot republish 1.0.0 within 24 hours of unpublishing. Please wait or use a new version."
              exit 0  # Don't fail the build for this case
            else
              exit 1  # Fail for other errors
            fi
          fi
